#!/bin/bash

# This script initializes the build environment
#
# This script takes no arguments

# This is a list of space-seperated applications used during a build.
# At least one of the applications in a comma-seperated item are needed.
# For example:
#   NEED_APPS="app1 app2 app3,app4 app5,app6"
#   An error message is printed if one of these conditions occur:
#     1) app1 does not exist
#     2) app2 does not exist
#     3) neither app3 nor app4 exist
#     4) neither app5 nor app6 exist
NEED_APPS="bunzip2 diff gcc grep gunzip makeinfo patch sed tar curl,wget"

# Check for needed applications
for APP in $NEED_APPS; do
  APP_FOUND=0
  OLD_IFS=$IFS
  IFS=","
  for OR_APP in $APP; do
    if [ ! -z "`which $OR_APP`" ]; then
      APP_FOUND=1
    fi
  done
  IFS=$OLD_IFS

  if [ $APP_FOUND == 0 ]; then
    echo A least one of these applications are needed, but none are installed:
    echo $APP
    exit 127
  fi
done

# Check for neded libraries
NEED_LIBS="mpc mpfr gmp"
for LIB in $NEED_LIBS; do
  echo "#include <$LIB.h>" > libtest.c
  gcc -c libtest.c 2> /dev/null
  if [ $? != 0 ]; then
    rm libtest.c
    echo "The lib$LIB library is needed, but is not installed"
    exit 127
  fi
  rm -f libtest.c libtest.o 2>/dev/null
done

# All tests for prerequisites have passed, continue
cd patchfiles

# Find latest version of GCC and latest patch
LIST=`ls gcc* | sed 's/-tms9900.*//'`
GCC_VER=`../utils/latest $LIST`
LIST=`ls $GCC_VER*`
GCC_PATCH=`../utils/latest $LIST`

# Find latest version of Binutils and latest patch
LIST=`ls binutils* | sed 's/-tms9900.*//'`
BIN_VER=`../utils/latest $LIST`
LIST=`ls $BIN_VER*`
BIN_PATCH=`../utils/latest $LIST`

# Get Binutils patch from user
PATCH_OK=false
while [ "$PATCH_OK" == "false" ]; do
  echo "Specify Binutils patch (default: $BIN_PATCH)"
  read USER_PATCH
  pwd
  if [ -z "$USER_PATCH" ]; then
    PATCH_OK=true
  elif [ -f "$USER_PATCH" ]; then
    if [[ "$USER_PATCH" == "binutils"* ]]; then
      BIN_PATCH=$USER_PATCH
      PATCH_OK=true
    else
      echo "Not a patch for Binutils, try again"
    fi
  else
    echo "Not found in ./patchfiles, try again"
  fi
done

# Get GCC patch from user
PATCH_OK=false
while [ "$PATCH_OK" == "false" ]; do
  echo "Specify GCC patch (default: $GCC_PATCH)"
  read USER_PATCH
  if [ -z "$USER_PATCH" ]; then
    PATCH_OK=true
  elif [ -f "$USER_PATCH" ]; then
    if [[ "$USER_PATCH" == "gcc"* ]]; then
      GCC_PATCH=$USER_PATCH
      PATCH_OK=true
    else
      echo "Not a patch for GCC, try again"
    fi
  else
    echo "Not found in ./patchfiles, try again"
  fi
done

# Get install directory
INSTALL_DIR="./install"
echo "Specify installation directory (default: ./install)"
read USER_DIR
if [ ! -z "$USER_DIR" ]; then
  INSTALL_DIR=$USER_DIR
fi

# Get full path to install directory
cd ..
HERE=`pwd`
mkdir -p $INSTALL_DIR
cd $INSTALL_DIR
INSTALL_DIR=`pwd`
cd $HERE

# Report settings
echo "Using $BIN_PATCH"
echo "Using $GCC_PATCH"
echo "Installing to $INSTALL_DIR"

# Save settings
echo "BIN_PATCH=$BIN_PATCH" > settings.cfg
echo "GCC_PATCH=$GCC_PATCH" >> settings.cfg
echo "INSTALL_DIR=$INSTALL_DIR" >> settings.cfg

# Make install directory
mkdir -p $INSTALL_DIR

# Initialize "src" directory
./utils/apply_patch patchfiles/$BIN_PATCH
./utils/apply_patch patchfiles/$GCC_PATCH

