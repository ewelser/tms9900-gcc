#!/bin/bash

# This script applies a patch to a GCC or Binutils source tree. If necessary,
# it will download and populate the "src_modified" and "src_original"
# directories with the needed source files. Then, the specified patch will be
# applied to the appropriate directory under "src_modofied". Finally, complete
# copies of the modified files will be placed in the "modified_files" directory.
#
# This script takes one argument: the the name of the patchfile to apply.
#
# Examples:
#   apply_patch patchfiles/gcc-12.0.1-tms9900-1.0.patch
#   apply_patch patchfiles/binutils-2.40-tms9900-1.0.patch

# Display usage help if needed
if [ -z $1 ] ||
   [ "$1" == "-h" ] ||
   [ "$1" == "--help" ]; then
  echo "Usage: apply_patch {PATCHFILE}"
  echo ""
  echo "  PATCHFILE - Path to patchfile to apply"
  echo "            from the latest patch number for BASE will be used"
  echo ""
  echo "The base source tree will be deduced from the patchfile name"
  echo ""
  echo "Examples:"
  echo "  apply_patch ./patchfiles/binutils-2.19.1-tms9900-1.7.patch"
  exit
fi

# Entry point
PATCHFILE=$1
BASE=${PATCHFILE##*/}
BASE=${BASE%-tms9900*}
  
# See if requested patch has already been applied
CURRENT=`grep $BASE src/applied_patches.txt`
if [ "$PATCHFILE" != "$CURRENT" ]; then
  # Remove old source directory
  rm -rf src/$BASE 2> /dev/null

  # Populate directory from archive
  utils/open_archive $BASE src/$BASE

  # Apply patch  
  cd src/$BASE
  patch -p1 < ../../$PATCHFILE
  cd ../..

  # Update files tracking currently applied patches
  grep -v "$BASE" src/applied_patches.txt > temp.txt
  echo ${PATCHFILE/*patchfiles/patchfiles} >> temp.txt
  mv temp.txt src/applied_patches.txt

  APP=${BASE%-*}
  APP=`echo $APP | tr binutlsgc BINUTLSGC`
  grep -v "$APP" settings.cfg > temp.txt
  echo ${APP}_PATCH=${PATCHFILE##*\/} >> temp.txt
  mv temp.txt settings.cfg

  # Update directory holding modified files
  utils/update_modified $PATCHFILE
fi

