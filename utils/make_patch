#!/bin/bash

# This script creates a patch for the changes made to a source tree in
# the "src_modified" directory. This is only done if there is a change
# to the code from the most recent existing patch. These patches are
# then stored in the "patchfiles" directory.
#
# This script takes up to two arguments: The first is the name of the source 
# tree to operate on. The second is optional, and specifies the patch version
# number. If no second argument is specified, the value of the highest existing
# patch's version number plus one will be used for the new patch version.
#
# Examples:
#   make_patch gcc-4.4.0
#   make_patch gcc-12.0.1 0.5
#   make_patch binutils-2.19.1
#   make_patch binutils-2.40 1.4

# Display usage help if needed
if [ -z $1 ] ||
   [ "$1" == "-h" ] ||
   [ "$1" == "--help" ]; then
  echo "Usage: make_patch {BASE} [VERSION]"
  echo ""
  echo "  BASE    - The source tree used as the patch base"
  echo "  VERSION - Version number to be used for patch. If not provided, an increment"
  echo "            from the latest patch number for BASE will be used"
  echo ""
  echo "Examples:"
  echo "  make_patch gcc-4.4.0"
  echo "  make_patch gcc-12.0.1 0.5"
  echo "  make_patch binutils-2.19.1"
  echo "  make_patch binutils-2.40 1.4"
  exit
fi

# Build a patchfile
build_patchfile() {
  # Populate directory with unmodified files
  if [ ! -d src/${BASE}-original ]; then
    utils/open_archive $BASE src/${BASE}-original
  fi

  # Clean build files
  cd src/$BASE
  make distclean > /dev/null 2> /dev/null

  # Remove Gedit backup files
  find . | grep "~$" | xargs rm 2> /dev/null

  # Revert any changes in doc directories
  while read DOCDIR; do
    rm -rf ./${DOCDIR}/* 2> /dev/null
    cp -rf ../${BASE}-original/${DOCDIR}/* ./${DOCDIR}/ 2> /dev/null
  done <<< `find . -name doc`

  # Remove GCC build directory
  rm -rf build

  # Make patchfile
  cd ..
  diff -rupN ${BASE}-original ${BASE} > ../temp.patch
  cd ..
}

# Entry point
BASE=$1
VERSION=$2
MAKE_NEW=false

# Find newest patchfile for target
LIST=`ls patchfiles | grep ${BASE}*` 2> /dev/null
LATEST=`utils/latest $LIST`

if [ "$LATEST" == "" ]; then
  # No previous version exists, make a patch
  if [ "$VERSION" == "" ]; then
    # No version number specified, start with 0.0
    VERSION="0.0"
  fi
  MAKE_NEW=true
else
  # See if newest patchfile is up-to-date.
  # Compare diff's, but ignore chunk headers
  build_patchfile
  sed -e '/^diff -rupN/d' -e '/^+++/d' -e '/^---/d' temp.patch > a
  sed -e '/^diff -rupN/d' -e '/^+++/d' -e '/^---/d' patchfiles/$LATEST > b
  diff a b > /dev/null
  IS_DIFF=$?
  rm a b
  rm temp.patch

  if [ "$IS_DIFF" == "1" ]; then
    # Changes have been made from the last patch version
    if [ -z "$VERSION" ]; then
      # No patch version specified, increment the most recent one
      VERSION=${LATEST%.*}
      VERSION=${VERSION##*-}
      MAJOR=${VERSION%%.*}
      let MINOR=${VERSION##*.}+1
      VERSION="${MAJOR}.${MINOR}"
      MAKE_NEW=true
    else
      # Validate provided patch version
      LATER=`utils/latest $LATEST $BASE-$VERSION`
      if [ "$LATER" != "$LATEST" ]; then
        MAKE_NEW=true
      else
        echo "Provided version number is lower than latest patch"
        exit
      fi
    fi
  fi
fi

if [ "$MAKE_NEW" == "false" ]; then
  echo "No need for patchfile for $BASE"
else
  # Make new patchfile
  PATCHFILE=patchfiles/${BASE}-tms9900-${VERSION}.patch
  echo "Making new patchfile ${PATCHFILE#*/}"
  if [[ "$BASE" == "gcc"* ]]; then
    # Update version number in patch
    echo "TMS9900 patch ${VERSION}" > src/$BASE/gcc/DEV-PHASE
  fi
  build_patchfile
  mv temp.patch $PATCHFILE

  # Update file tracking currently applied patches
  grep -v "$BASE" src/applied_patches.txt > temp.txt
  echo $PATCHFILE >> temp.txt
  mv temp.txt src/applied_patches.txt

  # Update directory holding modified files
  utils/update_modified $PATCHFILE
fi

